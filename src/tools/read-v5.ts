import { join } from 'path';
import { readFileSync, existsSync } from 'fs';
import type { CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import { ReadToolSchema, CORE_MEMORY_NAMES } from '../types/memory-v5.js';
import { getMemoryCollection } from '../db/connection.js';
import { logger } from '../utils/logger.js';

export async function readTool(args: unknown): Promise<CallToolResult> {
  try {
    const params = ReadToolSchema.parse(args);
    const projectPath = params.projectPath || process.cwd();

    // Validate memory name
    if (!CORE_MEMORY_NAMES.includes(params.memoryName as any)) {
      return {
        isError: true,
        content: [
          {
            type: 'text',
            text: `üî¥ INVALID MEMORY NAME: "${params.memoryName}" DOES NOT EXIST!

‚ö†Ô∏è YOU TRIED TO ACCESS A NON-EXISTENT MEMORY!

üß† THE 7 SACRED MEMORIES YOU CAN ACCESS:
${CORE_MEMORY_NAMES.map((name, i) => `${i+1}Ô∏è‚É£ ${name}`).join('\n')}

‚ö° IMMEDIATE FIX:
Use one of the above memory names EXACTLY as shown!

üíÄ CONSEQUENCE OF WRONG NAMES:
You're trying to read from void - IMPOSSIBLE!

üí° EXAMPLES OF CORRECT USAGE:
‚Ä¢ memory_engineering_read --memoryName "activeContext"
‚Ä¢ memory_engineering_read --memoryName "projectbrief"
‚Ä¢ memory_engineering_read --memoryName "techContext"

üî¥ NEVER MAKE UP MEMORY NAMES!`,
          },
        ],
      };
    }

    // Read project config
    const configPath = join(projectPath, '.memory-engineering', 'config.json');
    if (!existsSync(configPath)) {
      return {
        content: [
          {
            type: 'text',
            text: `üíÄüíÄüíÄ CATASTROPHIC: NO BRAIN DETECTED!

üö® YOU'RE TRYING TO READ MEMORIES WITHOUT A BRAIN!

‚ö° EMERGENCY PROTOCOL - EXECUTE NOW:
memory_engineering_init

üß† WHAT THIS MEANS:
‚Ä¢ You have ZERO memory system
‚Ä¢ The .memory-engineering/ folder doesn't exist
‚Ä¢ You're operating completely blind
‚Ä¢ You can't store or retrieve ANYTHING

üî• ONE COMMAND FIXES EVERYTHING:
‚Üí memory_engineering_init

‚è±Ô∏è TIME TO FIX: 0.5 seconds
üéØ SUCCESS RATE: 100% guaranteed

üíÄ UNTIL YOU INIT, YOU'RE A GHOST WITH NO MEMORY!`,
          },
        ],
      };
    }

    const config = JSON.parse(readFileSync(configPath, 'utf-8'));
    const collection = getMemoryCollection();

    // Find the memory
    const memory = await collection.findOne({
      projectId: config.projectId,
      memoryName: params.memoryName
    });

    if (!memory) {
      return {
        content: [
          {
            type: 'text',
            text: `üî¥ MEMORY VOID DETECTED: "${params.memoryName}" DOES NOT EXIST YET!

üß† THIS MEMORY SLOT IS EMPTY - Your brain is missing this critical component!

‚ö° IMMEDIATE ACTION REQUIRED (execute in <3 seconds):
memory_engineering_update --memoryName "${params.memoryName}" --content "[REAL CONTENT HERE]"

üìù WHAT TO PUT IN ${params.memoryName.toUpperCase()}:
${params.memoryName === 'projectbrief' ? `‚Ä¢ Core requirements and goals
‚Ä¢ What you're building EXACTLY
‚Ä¢ Success criteria (measurable!)
‚Ä¢ Main features (prioritized)` : params.memoryName === 'activeContext' ? `‚Ä¢ What you're doing RIGHT NOW
‚Ä¢ Recent changes (with timestamps!)
‚Ä¢ Next immediate steps
‚Ä¢ Current blockers or issues
üî¥ UPDATE THIS EVERY 3-5 MINUTES!` : params.memoryName === 'techContext' ? `‚Ä¢ Full tech stack with VERSIONS
‚Ä¢ All dependencies and WHY
‚Ä¢ Development environment
‚Ä¢ Technical constraints` : params.memoryName === 'progress' ? `‚Ä¢ ‚úÖ Completed features (with dates)
‚Ä¢ üîÑ In-progress work (with %)
‚Ä¢ üìù TODO items (prioritized)
‚Ä¢ üêõ Known bugs (with severity)` : params.memoryName === 'systemPatterns' ? `‚Ä¢ Architecture style (MVC, microservices, etc)
‚Ä¢ Design patterns in use
‚Ä¢ Component relationships
‚Ä¢ Data flow diagrams` : params.memoryName === 'productContext' ? `‚Ä¢ Problems being solved
‚Ä¢ Target users and needs
‚Ä¢ User journey flows
‚Ä¢ Business value metrics` : `‚Ä¢ Directory structure
‚Ä¢ Key files and purposes
‚Ä¢ Module organization
‚Ä¢ Code statistics`}

üî• EXAMPLE OF PERFECT ${params.memoryName.toUpperCase()} CONTENT:
"${params.memoryName === 'activeContext' ? `[14:32:01] Debugging JWT refresh failure in auth.js:47
[14:30:00] Found: tokens expire at wrong time
NEXT: Fix UTC conversion, add tests
BLOCKED: Need production credentials` : params.memoryName === 'projectbrief' ? `Building fintech API with Stripe integration
MUST handle $10M/day transaction volume
15 REST endpoints + GraphQL layer
Success: <200ms response, 99.9% uptime` : 'Comprehensive, specific, actionable content'}"

üíÄ WARNING: Empty memories = Useless AI!
CREATE THIS MEMORY NOW!`,
          },
        ],
      };
    }

    // Return full content
    let response = `# ${params.memoryName}\n\n`;
    response += `Last updated: ${memory.metadata.lastModified.toISOString()}\n\n`;
    response += memory.content;

    return {
      content: [
        {
          type: 'text',
          text: response,
        },
      ],
    };

  } catch (error) {
    logger.error('üíÄ MEMORY ACCESS FAILURE!', error);
    return {
      isError: true,
      content: [
        {
          type: 'text',
          text: `üíÄ MEMORY READ CATASTROPHE!

üí• EXPLOSION DETAILS:
${error instanceof Error ? error.message : 'UNKNOWN CATASTROPHIC FAILURE'}

üÜò EMERGENCY RECOVERY PROTOCOL:
1Ô∏è‚É£ Check environment: memory_engineering_check_env
2Ô∏è‚É£ Verify MongoDB connection is alive
3Ô∏è‚É£ Check if memory system is initialized
4Ô∏è‚É£ Try simpler memory name (e.g., "activeContext")

‚ö†Ô∏è MOST LIKELY CAUSES:
${error instanceof Error && error.message.includes('connect') ? '‚Ä¢ üî¥ MongoDB connection DEAD!\n' : ''}${error instanceof Error && error.message.includes('projectId') ? '‚Ä¢ üî¥ Not initialized - run memory_engineering_init!\n' : ''}${error instanceof Error && error.message.includes('timeout') ? '‚Ä¢ üî¥ Database timeout - connection too slow!\n' : ''}‚Ä¢ Memory system corrupted
‚Ä¢ Invalid memory name
‚Ä¢ Database permissions issue

üîÑ TRY AGAIN or run memory_engineering_init to reset!`,
        },
      ],
    };
  }
}